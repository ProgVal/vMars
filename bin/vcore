#!/usr/bin/env python

from vmars.core import Mars, MarsProperties, Warrior

import vmars.core as core

if 'xrange' not in globals():
    xrange = range

def main():
    import os
    import sys
    import argparse
    parser = argparse.ArgumentParser(
            description='Runs a bunch of warriors.')
    parser.add_argument('warriors', metavar='warrior.rc', type=open,
            nargs='+', help='warrior source codes.')
    parser.add_argument('--laxist', '-l', action='store_true',
            help='determines whether vMars will perform strict checks')
    parser.add_argument('--gui', '-g', action='store_true',
            help='determines whether the GUI will be used')

    for (key, value) in MarsProperties().as_dict.items():
        parser.add_argument('--' + key, default=value, type=int)

    try:
        args = vars(parser.parse_args())
    except IOError as e: # Failed to open files
        sys.stderr.write(str(e) + '\n')
        sys.stderr.flush()
        exit()

    gui = args.pop('gui')
    core.STRICT = not args.pop('laxist')
    warriors = args.pop('warriors')

    print('Booting MARS.')
    properties = MarsProperties(**args)
    mars = Mars(properties)

    print('Loading warriors:')
    warriors = [Warrior(x.read()) for x in warriors]
    for warrior in warriors:
        print('\t' + str(warrior))
        mars.load(warrior)

    if gui:
        print('Starting GUI.')
        from vmars.qt.callbackapplication import CallbackApplication
        from vmars.qt.memoryview import MemoryView
        app = CallbackApplication(sys.argv)
        class MemoryView2(MemoryView):
            def closeEvent(self, event):
                exit()
        mv = MemoryView2(mars.memory)
        mv.show()
        app.exec_(run_warriors, (mv, mars, warriors, gui))
    else:
        run_warriors(None, mars, warriors, False)

def run_warriors(win, mars, warriors, gui):
    print('Running processes.')
    progress_step = int(mars.properties.maxcycles/10)
    progress = progress_step
    try:
        for cycle in xrange(1, mars.properties.maxcycles+1):
            progress += 1
            if progress >= progress_step:
                print('\t%i%%' % (100*cycle/mars.properties.maxcycles))
                progress = 0
            dead_warriors = mars.cycle()
            for warrior in dead_warriors:
                print('\tWarrior %s died at cycle %i.' % (warrior, cycle))
            if mars.warriors == []:
                break
    except KeyboardInterrupt:
        print('\tHalt signal got.')

    print('War ended at cycle %i.' % cycle)
    for warrior in warriors:
        if warrior in mars.warriors:
            print('\t%s survived.' % warrior)
        else:
            print('\t%s died.' % warrior)

    if gui:
        win.close()


if __name__ == '__main__':
    main()
